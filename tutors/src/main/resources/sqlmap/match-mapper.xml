<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="match.mapper">

	<!-- 선생 리스트 -->
	<select id="teacherList" resultType="match.TeacherVO">
			select *
			from (select rownum num ,t.* 
        		  from (select t.* from teacher t inner join member m
		                on m.id = t.teacher_id
		                where t.teacher_date is not null
		                <include refid="teacher_addr_where" />
		                <include refid="teacher_gender_where" />
		                <include refid="teacher_subject_where" />
		                <include refid="teacher_pay_where" />
		                order by teacher_date desc) t)
		<![CDATA[
			where num <= ((#{count}+1) * 8) 
				and num > (8 * #{count} )
		]]>
	</select>
	
	<sql id="teacher_addr_where">
		<if test="addr1 != '' and addr2 != ''">
			and teacher_addr = #{addr1} || ' ' || #{addr2}
		</if>
		<if test="addr1 != '' and addr2 == ''">
			and teacher_addr like '%' || #{addr1} || '%'
		</if>
	</sql>

	<sql id="teacher_gender_where">
		<if test="gender == '남자'">
			and m.gender = #{gender}
		</if>
		<if test="gender == '여자'">
			and m.gender = #{gender}
		</if>
	</sql>
	
	<sql id="teacher_subject_where">
		<if test="subject != ''">
			and teacher_subject = #{subject}
		</if>
	</sql>
	
	<sql id="teacher_pay_where">
		<if test="pay != ''">
	 		and to_number(t.teacher_pay) &lt; to_number(#{pay})		
		</if>
	</sql>

	<!-- 학생 리스트 -->
	<select id="studentList" resultType="match.StudentVO">
		
			select *
			from (select rownum num ,s.* 
				  from (select s.* from student s inner join member m
		                on m.id = s.student_id
		                where s.student_date is not null
				  		<include refid="student_addr_where" />
				  		<include refid="student_gender_where" />
				  		<include refid="student_subject_where" />
				  		order by student_date desc) s)
		<![CDATA[ 
			where num <= ((#{count}+1) * 8) 
				and num > (8 * #{count} )
		]]> 
	</select>
	
	<sql id="student_addr_where">
		<if test="addr1 != '' and addr2 != ''">
			and student_addr = #{addr1} || ' ' || #{addr2}
		</if>
		<if test="addr1 != '' and addr2 == ''">
			and student_addr like '%' || #{addr1} || '%'
		</if>
	</sql>

	<sql id="student_gender_where">
		<if test="gender == '남자'">
			and m.gender = #{gender}
		</if>
		<if test="gender == '여자'">
			and m.gender = #{gender}
		</if>
	</sql>
	
	<sql id="student_subject_where">
		<if test="subject != ''">
			and student_subject = #{subject}
		</if>
	</sql>	
	
	<select id="teacherDetail" resultType="match.TeacherVO">
		select * from teacher where teacher_id = #{teacher_id}
	</select>
	
	<select id="studentDetail" resultType="match.StudentVO">
		select * from student where student_id = #{student_id}
	</select>
	
	<select id="teacher_check" resultType="Integer">
		select count(*) from teacher where teacher_id = #{id} 
	</select>
	
	<select id="student_check" resultType="Integer">
		select count(*) from student where student_id = #{id} 
	</select>
	
	<update id="teacherUpdate">
		update teacher set 
		teacher_univ = #{teacher_univ},teacher_major = #{teacher_major},
		teacher_univnum = #{teacher_univnum},teacher_subject = #{teacher_subject},
		teacher_worktime = #{teacher_worktime},teacher_pay = #{teacher_pay},
		teacher_intro = #{teacher_intro}, teacher_date = sysdate
		where teacher_id = #{teacher_id}
	</update>
	
	<update id="studentUpdate">
		update student set
		student_grade = #{student_grade}, student_subject = #{student_subject},
		student_intro = #{student_intro}, student_date = sysdate
		where student_id = #{student_id}
	</update>
	
	<select id="isAlreadyMatch" resultType="Integer">
		select count(*) from match where teacher_id = #{teacher_id} and student_id = #{student_id}
	</select>
	
	<insert id="student_match">
		insert into match(teacher_id,student_id,student_value,teacher_nickname,student_nickname)
		values(#{teacher_id},#{student_id},'1',
		(select teacher_nickname from teacher where teacher_id = #{teacher_id}),
		(select student_nickname from student where student_id = #{student_id}))
	</insert>
	
	<update id="teacherCheck">
		update match set teacher_value = '1'
		where teacher_id = #{teacher_id} and student_id = #{student_id} and teacher_value = '0' and student_value = '1' and admin_value = '0'
	</update>
	
	<delete id="teacherClose">
		delete from match
		where teacher_id = #{teacher_id} and student_id = #{student_id} and teacher_value = '0' and student_value = '1' and admin_value = '0'
	</delete>
	
	<update id="adminCheck">
		update match set admin_value = '1'
		where teacher_id = #{teacher_id} and student_id = #{student_id} and teacher_value = '1' and student_value = '1' and admin_value = '0'
	</update>
	
	<delete id="adminClose">
		delete from match
		where teacher_id = #{teacher_id} and student_id = #{student_id} and teacher_value = '1' and student_value = '1' and admin_value = '0'
	</delete>
	
</mapper>
